---
title: "NYCTaxi"
author: "남윤권(202121220)"
format: dashboard
execute: 
  enabled: true
  cache: false
  freeze: false
---

```{python}
#| output: false
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.io as pio
import json
import requests
import pickle

pd.options.plotting.backend = "plotly"
pio.templates.default = "plotly_white"

df = pd.read_csv("https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv").assign(
    log_trip_duration = lambda df: np.log(df.trip_duration),
    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),
    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),
    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),
    #---#
    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})
).assign(
    speed = lambda df: df.dist / df.trip_duration,
    pickup_hour = lambda df: df.pickup_datetime.dt.hour,
    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,
    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek
)
df_small = df[::100].reset_index(drop=True)

day_dict = {'월':'0','화':'1','수':'2','목':'3','금':'4','토':'5','일':'6'}

df_small = df_small.assign(
    dayofweek = df_small['dayofweek'].astype(str))

tidydata1=df_small.assign(
    dayofweek = df_small.dayofweek.apply(lambda x: [k for k,v in day_dict.items() if x in v].pop()))

# 1-(1) 요일,시간에 따른 평균속력

tidydata2 = tidydata1.pivot_table(
    index = 'pickup_hour',
    columns = 'dayofweek',
    values = 'speed',
    aggfunc = 'mean'
).stack().reset_index().rename({0:'speed_mean'},axis=1)
fig1 = px.density_heatmap(
    data_frame=tidydata2,
    x='pickup_hour',
    y='dayofweek',
    z='speed_mean',
    category_orders={'dayofweek': ['일','토','금','목','수','화','월']},
    nbinsx=24,
    nbinsy=7,
    height=300
)

layout = {
    'xaxis':{'title':'pickup 시간'},
    'yaxis':{'title':'요일'}     
}

fig1.update_layout(layout)

fig1 = fig1.update_coloraxes(colorbar_title='평균속력')

## 1-(2) 요일,시간에 따른 평균이동거리

tidydata3 = tidydata1.pivot_table(
    index = 'pickup_hour',
    columns = 'dayofweek',
    values = 'dist',
    aggfunc = 'mean'
).stack().reset_index().rename({0:'dist_mean'},axis=1)
fig2 = px.density_heatmap(
    data_frame=tidydata3,
    x='pickup_hour',
    y='dayofweek',
    z='dist_mean',
    category_orders={'dayofweek': ['일','토','금','목','수','화','월']},
    nbinsx=24,
    nbinsy=7,
    height=300
)

layout = {
    'xaxis':{'title':'pickup 시간'},
    'yaxis':{'title':'요일'}     
}

fig2.update_layout(layout)
fig2 = fig2.update_coloraxes(colorbar_title='평균이동거리')


## 데이터 전처리
pcol = ['pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'pickup_hour']
dcol = ['dropoff_datetime', 'dropoff_longitude', 'dropoff_latitude', 'dropoff_hour']
def transform(df):
    pickup = df.loc[:,['id']+pcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'pickup')
    dropoff = df.loc[:,['id']+dcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'dropoff')
    return pd.concat([pickup,dropoff],axis=0)
df_left = df_small.drop(pcol+dcol,axis=1)
df_right = pd.concat([transform(df) for i, df in df_small.groupby('id')]).reset_index(drop=True)
df_small2 = df_left.merge(df_right)
df_small2.head()

## 1-(3) 속력별 경로 시각화
tidydata = df_small2.assign(
    speed_cut1 = pd.qcut(df_small2.speed,4,labels=['매우느림(path)','조금느림(path)','조금빠름(path)','매우빠름(path)']),
    speed_cut2 = pd.qcut(df_small2.speed,4,labels=['매우느림(pickup/dropoff)','조금느림(pickup/dropoff)','조금빠름(pickup/dropoff)','매우빠름(pickup/dropoff)'])
).sort_values('speed_cut1')
fig3 = px.line_mapbox(
    data_frame=tidydata,
    lat = 'latitude',
    lon = 'longitude',
    line_group = 'id',
    color = 'speed_cut1',
    center = {'lat':40.7322, 'lon':-73.9052},
    #---#
    mapbox_style = 'carto-positron',
    zoom=11
)
scatter_data = px.scatter_mapbox(
    data_frame=tidydata,
    lat = 'latitude',
    lon = 'longitude',
    size = 'passenger_count',
    size_max = 10,
    color = 'speed_cut2',
    #---#
    mapbox_style = 'carto-positron',
    zoom=11
).data
for sd in scatter_data: 
    fig3.add_trace(sd)

fig3.update_traces(
    line={
        'width':1
    },
    opacity=0.8
)

fig3 = fig3.update_layout(
    legend = {'title':{'text':'평균속력'}}
)



# 1-(1),(2),(3) 에 대응하는 plotly figure를 아래와 같은 이름으로 저장
fig1 = fig1.update_coloraxes(colorbar_title='평균속력')

fig2 = fig2.update_coloraxes(colorbar_title='평균이동거리')

fig3 = fig3.update_layout(
    legend = {'title':{'text':'평균속력'}}
)

```

# 기말고사1-(1),(2)

```{python}
#| title: 요일,시간에 따른 평균속력 시각화        
fig1.show()
```

```{python}
#| title: 요일,시간에 따른 평균이동거리 시각화        
fig2.show()
```

# 기말고사1-(3)

```{python}
#| title: 속력별 경로 시각화
fig3.show()
```